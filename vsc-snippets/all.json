{
  "Print filename": {
    "prefix": "ff",
    "body": ["${TM_FILENAME_BASE}"]
  },
  "Placeholder": {
    "prefix": "placeholder",
    "body": ["//via.placeholder.com//${1:1600}x${2:900}"]
  },
  "Placekitten": {
    "prefix": "placekitten",
    "body": ["//placekitten.com//${1:1600}/${2:900}"]
  },
  "Unsplash": {
    "prefix": "unsplash",
    "body": ["//source.unsplash.com/${1:1600}x${2:900}"]
  },
  "Print to console": {
    "prefix": "log",
    "body": ["console.log($1)"]
  },
  "Import react": {
    "prefix": "irea",
    "body": "import * as React from 'react'"
  },
  "Import propTypes": {
    "prefix": "ipro",
    "body": ["import PropTypes from 'prop-types'"]
  },
  "Import mui": {
    "prefix": "imui",
    "body": "import { $2 } from '@mui/$1'"
  },
  "Import noa": {
    "prefix": "inoa",
    "body": "import { $2 } from '@noaignite/$1'"
  },
  "Export default": {
    "prefix": "ee",
    "body": ["export { default } from './${1:Component}'"]
  },
  "Export default as": {
    "prefix": "eee",
    "body": ["export { default as ${1:Component} } from './${1:Component}'"]
  },
  "Import module": {
    "prefix": "ii",
    "body": ["import $2 from '$1'"]
  },
  "Import local module": {
    "prefix": "iii",
    "body": ["import $2 from '~/${1:components}'"]
  },
  "Translate w/ literas": {
    "prefix": "tt",
    "body": ["t(${2:__translationGroup})`$1`"]
  },
  "Mui styled w/o theme": {
    "prefix": "ss",
    "body": [
      "const ${1:${TM_FILENAME_BASE}}${2:Root} = styled(${3:'div'})({",
      "  ${4}",
      "})"
    ]
  },
  "Mui styled w/ theme": {
    "prefix": "sss",
    "body": [
      "const ${1:${TM_FILENAME_BASE}}${2:Root} = styled(${3:'div'})(({ theme }) => ({",
      "  ${4}",
      "}))"
    ]
  },
  "React danger": {
    "prefix": "danger",
    "body": ["dangerouslySetInnerHTML={{ __html: $1 }}"]
  },
  "React useCallback": {
    "prefix": "ruc",
    "body": [
      "const $1 = React.useCallback(($2) => {",
      "  $4",
      "}, [$3])"
    ]
  },
  "React useEffect": {
    "prefix": "rue",
    "body": [
      "React.useEffect(() => {",
      "  $2",
      "}, [$1])"
    ]
  },
  "React useMemo": {
    "prefix": "rum",
    "body": [
      "const $1 = React.useMemo(",
      "  () => ({ $2 }),",
      "  [$2]",
      ")"
    ]
  },
  "React useRef": {
    "prefix": "rur",
    "body": [
      "const $1Ref = React.useRef(${2:null})"
    ]
  },
  "React useState": {
    "prefix": "rus",
    "body": ["const [$1, set${1/(.*)/${1:/capitalize}/}] = React.useState($2)"]
  },
  "Create React Story": {
    "prefix": "reactStory",
    "body": [
      "import * as React from 'react'",
      "import ${1:MyComponent} from './${1:MyComponent}'",
      "",
      "export default {",
      "  title: '${2:Components}/${1:MyComponent}',",
      "  component: ${1:MyComponent},",
      "}",
      "",
      "const Template = (args) => <${1:MyComponent} {...args} />",
      "",
      "export const Default = Template.bind({})",
      "Default.args = {",
      "  children: 'Just some children',",
      "}",
      ""
    ]
  },
  "React function": {
    "prefix": "rf",
    "body": [
      "import * as React from 'react'",
      "",
      "function ${1:${TM_FILENAME_BASE}}(props) {",
      "  return (",
      "    <div>",
      "      $2",
      "    </div>",
      "  )",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE}}",
      ""
    ]
  },
  "React function props": {
    "prefix": "rfp",
    "body": [
      "import * as React from 'react'",
      "import PropTypes from 'prop-types'",
      "",
      "function ${1:${TM_FILENAME_BASE}}(props) {",
      "  return (",
      "    <div>",
      "      $3",
      "    </div>",
      "  )",
      "}",
      "",
      "${1:${TM_FILENAME_BASE}}.propTypes = {",
      "  ${2}",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE}}",
      ""
    ]
  },
  "React function props memo": {
    "prefix": "rfpm",
    "body": [
      "import * as React from 'react'",
      "import PropTypes from 'prop-types'",
      "",
      "const ${1:${TM_FILENAME_BASE}} = React.memo(function ${1:${TM_FILENAME_BASE}}(props) {",
      "  return (",
      "    <div>",
      "      $3",
      "    </div>",
      "  )",
      "})",
      "",
      "${1:${TM_FILENAME_BASE}}.propTypes = {",
      "  $2",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE}}",
      ""
    ]
  },
  "React function props ref": {
    "prefix": "rfpf",
    "body": [
      "import * as React from 'react'",
      "import PropTypes from 'prop-types'",
      "",
      "const ${1:${TM_FILENAME_BASE}} = React.forwardRef(function ${1:${TM_FILENAME_BASE}}(props, ref) {",
      "  return (",
      "    <div ref={ref}>",
      "      $3",
      "    </div>",
      "  )",
      "})",
      "",
      "${1:${TM_FILENAME_BASE}}.propTypes = {",
      "  $2",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE}}",
      ""
    ]
  },
  "propTypes": {
    "prefix": "rpt",
    "body": "${1:$TM_FILENAME_BASE}.propTypes = {\n\t$2\n}",
    "description": "Creates empty propTypes declaration"
  },
  "propTypeArray": {
    "prefix": "pta",
    "body": "PropTypes.array,",
    "description": "Array prop type"
  },
  "propTypeArrayRequired": {
    "prefix": "ptar",
    "body": "PropTypes.array.isRequired,",
    "description": "Array prop type required"
  },
  "propTypeBool": {
    "prefix": "ptb",
    "body": "PropTypes.bool,",
    "description": "Bool prop type"
  },
  "propTypeBoolRequired": {
    "prefix": "ptbr",
    "body": "PropTypes.bool.isRequired,",
    "description": "Bool prop type required"
  },
  "propTypeFunc": {
    "prefix": "ptf",
    "body": "PropTypes.func,",
    "description": "Func prop type"
  },
  "propTypeFuncRequired": {
    "prefix": "ptfr",
    "body": "PropTypes.func.isRequired,",
    "description": "Func prop type required"
  },
  "propTypeNumber": {
    "prefix": "ptn",
    "body": "PropTypes.number,",
    "description": "Number prop type"
  },
  "propTypeNumberRequired": {
    "prefix": "ptnr",
    "body": "PropTypes.number.isRequired,",
    "description": "Number prop type required"
  },
  "propTypeObject": {
    "prefix": "pto",
    "body": "PropTypes.object,",
    "description": "Object prop type"
  },
  "propTypeObjectRequired": {
    "prefix": "ptor",
    "body": "PropTypes.object.isRequired,",
    "description": "Object prop type required"
  },
  "propTypeString": {
    "prefix": "pts",
    "body": "PropTypes.string,",
    "description": "String prop type"
  },
  "propTypeStringRequired": {
    "prefix": "ptsr",
    "body": "PropTypes.string.isRequired,",
    "description": "String prop type required"
  },
  "propTypeSymbol": {
    "prefix": "ptsm",
    "body": "PropTypes.symbol,",
    "description": "Symbol prop type"
  },
  "propTypeSymbolRequired": {
    "prefix": "ptsmr",
    "body": "PropTypes.symbol.isRequired,",
    "description": "Symbol prop type required"
  },
  "propTypeAny": {
    "prefix": "ptan",
    "body": "PropTypes.any,",
    "description": "Any prop type"
  },
  "propTypeAnyRequired": {
    "prefix": "ptanr",
    "body": "PropTypes.any.isRequired,",
    "description": "Any prop type required"
  },
  "propTypeNode": {
    "prefix": "ptnd",
    "body": "PropTypes.node,",
    "description": "Anything that can be rendered: numbers, strings, elements or an array"
  },
  "propTypeNodeRequired": {
    "prefix": "ptndr",
    "body": "PropTypes.node.isRequired,",
    "description": "Anything that can be rendered: numbers, strings, elements or an array required"
  },
  "propTypeElement": {
    "prefix": "ptel",
    "body": "PropTypes.element,",
    "description": "React element prop type"
  },
  "propTypeElementRequired": {
    "prefix": "ptelr",
    "body": "PropTypes.element.isRequired,",
    "description": "React element prop type required"
  },
  "propTypeInstanceOf": {
    "prefix": "pti",
    "body": "PropTypes.instanceOf($0),",
    "description": "Is an instance of a class prop type"
  },
  "propTypeInstanceOfRequired": {
    "prefix": "ptir",
    "body": "PropTypes.instanceOf($0).isRequired,",
    "description": "Is an instance of a class prop type required"
  },
  "propTypeEnum": {
    "prefix": "pte",
    "body": "PropTypes.oneOf(['$0']),",
    "description": "Prop type limited to specific values by treating it as an enum"
  },
  "propTypeEnumRequired": {
    "prefix": "pter",
    "body": "PropTypes.oneOf(['$0']).isRequired,",
    "description": "Prop type limited to specific values by treating it as an enum required"
  },
  "propTypeOneOfType": {
    "prefix": "ptet",
    "body": "PropTypes.oneOfType([\n\t$0\n]),",
    "description": "An object that could be one of many types"
  },
  "propTypeOneOfTypeRequired": {
    "prefix": "ptetr",
    "body": "PropTypes.oneOfType([\n\t$0\n]).isRequired,",
    "description": "An object that could be one of many types required"
  },
  "propTypeArrayOf": {
    "prefix": "ptao",
    "body": "PropTypes.arrayOf($0),",
    "description": "An array of a certain type"
  },
  "propTypeArrayOfRequired": {
    "prefix": "ptaor",
    "body": "PropTypes.arrayOf($0).isRequired,",
    "description": "An array of a certain type required"
  },
  "propTypeObjectOf": {
    "prefix": "ptoo",
    "body": "PropTypes.objectOf($0),",
    "description": "An object with property values of a certain type"
  },
  "propTypeObjectOfRequired": {
    "prefix": "ptoor",
    "body": "PropTypes.objectOf($0).isRequired,",
    "description": "An object with property values of a certain type required"
  },
  "propTypeObjectOfShape": {
    "prefix": "ptoos",
    "body": "PropTypes.objectOf(PropTypes.shape($0)),",
    "description": "An object whose keys are known ahead of time"
  },
  "propTypeObjectOfShapeRequired": {
    "prefix": "ptoosr",
    "body": "PropTypes.objectOf(PropTypes.shape($0)).isRequired,",
    "description": "An object whose keys are known ahead of time required"
  },
  "propTypeShape": {
    "prefix": "ptsh",
    "body": "PropTypes.shape({\n\t$0\n}),",
    "description": "An object taking on a particular shape"
  },
  "propTypeShapeRequired": {
    "prefix": "ptshr",
    "body": "PropTypes.shape({\n\t$0\n}).isRequired,",
    "description": "An object taking on a particular shape required"
  }
}
